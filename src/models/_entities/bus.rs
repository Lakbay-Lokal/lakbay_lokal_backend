//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "bus")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Double")]
    pub location_longitude: f64,
    #[sea_orm(column_type = "Double")]
    pub location_latitude: f64,
    pub number_of_people_inside: i32,
    pub is_running: bool,
    pub route_id: i32,
    pub next_station_id: i32,
    pub assigned_driver: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::bus_driver::Entity",
        from = "Column::AssignedDriver",
        to = "super::bus_driver::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    BusDriver,
    #[sea_orm(
        belongs_to = "super::station::Entity",
        from = "Column::NextStationId",
        to = "super::station::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Station,
    #[sea_orm(has_many = "super::ticket::Entity")]
    Ticket,
}

impl Related<super::bus_driver::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BusDriver.def()
    }
}

impl Related<super::station::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Station.def()
    }
}

impl Related<super::ticket::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ticket.def()
    }
}
